<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Live Flood Updates - FloodSheild</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <style>
        #map {
            height: 400px;
            width: 100%;
            border-radius: 8px;
        }
        .forecast-card {
            transition: all 0.3s ease;
        }
        .forecast-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }
    </style>
</head>
<body class="bg-gray-100">
    <%- include("partials/header.ejs") %>
    
    <main class="container mx-auto px-4 py-8">
        <div class="max-w-4xl mx-auto">
            <h1 class="text-3xl font-bold text-gray-800 mb-8">Live Flood Updates</h1>
            
            <!-- Location Search -->
            <div class="bg-white rounded-lg shadow-md p-6 mb-8">
                <h2 class="text-xl font-semibold mb-4">Enter Your Location</h2>
                <div class="flex gap-4">
                    <input type="text" id="locationInput" 
                           class="flex-1 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                           placeholder="Enter city, state, or coordinates">
                    <button onclick="searchLocation()" 
                            class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition duration-300">
                        Search
                    </button>
                </div>
            </div>

            <!-- Map Display -->
            <div class="bg-white rounded-lg shadow-md p-6 mb-8">
                <h2 class="text-xl font-semibold mb-4">Location Map</h2>
                <div id="map"></div>
            </div>

            <!-- Live Forecast -->
            <div class="bg-white rounded-lg shadow-md p-6">
                <h2 class="text-xl font-semibold mb-4">Live Flood Forecast</h2>
                <div id="forecastContainer" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Forecast cards will be dynamically added here -->
                </div>
            </div>
        </div>
    </main>

    <%- include("partials/footer.ejs") %>

    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script>
        let map;
        let marker;
        
        // Initialize map
        function initMap() {
            map = L.map('map').setView([20.5937, 78.9629], 5); // Center on India
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);
        }

        // Search location using OpenStreetMap Nominatim API
        async function searchLocation() {
            const location = document.getElementById('locationInput').value;
            if (!location) return;

            try {
                // Geocoding using Nominatim
                const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(location)}&countrycodes=in`);
                const data = await response.json();
                
                if (data.length > 0) {
                    const { lat, lon } = data[0];
                    updateMap(lat, lon);
                    await updateForecast(lat, lon);
                } else {
                    alert('Location not found. Please try another city.');
                }
            } catch (error) {
                console.error('Error fetching location:', error);
                alert('Error searching location. Please try again.');
            }
        }

        // Update map with new location
        function updateMap(lat, lng) {
            if (marker) {
                map.removeLayer(marker);
            }
            map.setView([lat, lng], 12);
            marker = L.marker([lat, lng]).addTo(map);
        }

        // Update forecast display using OpenWeatherMap API
        async function updateForecast(lat, lng) {
            const forecastContainer = document.getElementById('forecastContainer');
            
            try {
                // Using the provided OpenWeatherMap API key
                const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lng}&appid=2c74166af28c19885b6bdcaf9b77b40c&units=metric`);
                const data = await response.json();
                
                // Get current weather
                const currentWeather = data.list[0];
                const rainVolume = currentWeather.rain ? currentWeather.rain['3h'] || 0 : 0;
                
                // Calculate flood risk based on rainfall
                let floodRisk = 'Low';
                let riskColor = 'bg-green-100 text-green-800';
                
                if (rainVolume > 50) {
                    floodRisk = 'High';
                    riskColor = 'bg-red-100 text-red-800';
                } else if (rainVolume > 20) {
                    floodRisk = 'Moderate';
                    riskColor = 'bg-yellow-100 text-yellow-800';
                }

                const forecasts = [
                    {
                        title: 'Current Temperature',
                        value: `${currentWeather.main.temp}°C`,
                        status: currentWeather.weather[0].description,
                        color: 'bg-blue-100 text-blue-800'
                    },
                    {
                        title: 'Rainfall (Last 3h)',
                        value: `${rainVolume}mm`,
                        status: rainVolume > 0 ? 'Raining' : 'No Rain',
                        color: 'bg-blue-100 text-blue-800'
                    },
                    {
                        title: 'Flood Risk Level',
                        value: floodRisk,
                        status: `Based on rainfall data`,
                        color: riskColor
                    },
                    {
                        title: 'Humidity',
                        value: `${currentWeather.main.humidity}%`,
                        status: currentWeather.main.humidity > 80 ? 'High' : 'Normal',
                        color: 'bg-gray-100 text-gray-800'
                    }
                ];

                forecastContainer.innerHTML = forecasts.map(forecast => `
                    <div class="forecast-card bg-white p-6 rounded-lg shadow-md ${forecast.color}">
                        <h3 class="text-lg font-semibold mb-2">${forecast.title}</h3>
                        <p class="text-2xl font-bold mb-2">${forecast.value}</p>
                        <p class="text-sm">${forecast.status}</p>
                    </div>
                `).join('');
            } catch (error) {
                console.error('Error fetching weather data:', error);
                alert('Error fetching weather data. Please try again.');
            }
        }

        // Initialize map when page loads
        document.addEventListener('DOMContentLoaded', initMap);
    </script>
</body>
</html> 